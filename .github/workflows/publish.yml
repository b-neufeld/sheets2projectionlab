name: publish
on:
  release:
    types: [published]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  publish-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      # Checkout the repository
      - uses: actions/checkout@v2

      # Login to GitHub Container Registry (updated to v2)
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Determine if the release is a pre-release
      - name: Check if pre-release
        id: prerelease
        run: |
          echo "IS_PRERELEASE=${{ github.event.release.prerelease }}" >> $GITHUB_ENV

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern={{version}}

      # Build and push Docker image without the latest tag
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # A short time delay to ensure the image can be pulled after pushed 
      - name: Wait for image availability 
        run: sleep 20

      # Pull the image again so it's available locally
      - name: Pull Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}

      # Conditionally add the 'latest' tag for non-pre-releases
      - name: Add 'latest' tag if not a pre-release
        if: env.IS_PRERELEASE != 'true'
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
